module Backend.Prelude (module Exports) where

import Shared.Prelude (class Applicative, class Apply, class Bind, class BooleanAlgebra, class Bounded, class Category, class CommutativeRing, class Discard, class DivisionRing, class Eq, class EuclideanRing, class Field, class Functor, class HeytingAlgebra, class Monad, class Monoid, class Ord, class Ring, class Semigroup, class Semigroupoid, class Semiring, class Show, type ($), type (~>), Aff, BracketConditions, Canceler(..), Dolla, Effect, Either(..), Error, Fiber, Maybe(..), Milliseconds(..), Ordering(..), ParAff, Unit, Void, absurd, add, ap, append, apply, attempt, between, bind, bottom, bracket, choose, clamp, compare, comparing, compose, conj, const, degree, discard, disj, div, either, eq, error, flap, flip, forE, foreachE, forkAff, fromJust, fromLeft, fromMaybe, fromMaybe', fromRight, gcd, hush, i, identity, ifM, isJust, isLeft, isNothing, isRight, join, launchAff, launchAff_, lcm, liftA1, liftEffect, liftM1, log, logShow, makeAff, map, max, maybe, maybe', mempty, min, mod, mul, negate, not, notEq, note, note', one, optional, otherwise, parallel, pure, recip, runAff, runAff_, sequential, show, sub, top, try, unit, unless, unlessM, untilE, void, when, whenM, whileE, zero, (#), ($), ($>), (&&), (*), (*>), (+), (-), (/), (/=), (<), (<#>), (<$), (<$>), (<*), (<*>), (<<<), (<=), (<=<), (<>), (<@>), (=<<), (==), (>), (>=), (>=>), (>>=), (>>>), (||)) as Exports
import Node.FS.Aff (appendTextFile, readTextFile, writeTextFile) as Exports
import Node.Process (argv, getEnv, lookupEnv, stderr, stdin, stdout) as Exports
